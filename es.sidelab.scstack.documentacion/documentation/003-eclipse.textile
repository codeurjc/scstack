
h1. Proceso de desarrollo con Eclipse

Prerequisitos:

Se recomienda utilizar la versión de Eclipse **Spring Tools Suite 3.1** de Spring:

* http://www.springsource.org/downloads/sts-ggts

Se ha de escoger la opción basada en **Eclipse 3.8.1** ya que incluye la instalación de las herramientas relacionadas con @Git@ como es el caso del plugin "Egit":http://www.eclipse.org/egit/.

Para usar los ejemplos de la línea de comandos se han de instalar los clientes especificados para cada plataforma que se definieron en el apartado [Clientes git]

h2. Paso 1 - Generación de claves

Se han de generar las claves para el acceso al repositorio remoto

**Ubuntu:**

pre. $ ssh-keygen -t rsa

* Copiar el contenido del fichero @~/.ssh/id_rsa.pub@ en el depósito de claves de la cuenta personal de **Gerrit**.

**Windows:**

pre. Git bash
ssh-keygen.exe

* Copiar el contenido del fichero @c:/documents and settings/<usuario>/.ssh/id_rsa.pub@ en el depósito de claves de la cuenta personal de **Gerrit**.

"Generating SSH Keys":https://help.github.com/articles/generating-ssh-keys

h2. Paso 2 - Clonar el repositorio

El administrador del proyecto ha creado un repositorio en **Gerrit** con dos ramas:

* master
* development

h3. Situación del repositorio

Clonar el repositorio remoto tiene consecuencias:

* El repositorio local guarda localmente información sobre el repositorio remoto (llamado por defecto “origin”)
* Esto permite _subir/bajar_ cambios _al/desde_ repositorio remoto
* Las ramas refs/heads/* del repositorio remoto se almacenan en el repositorio local como @refs/remotes/origin/*@.
* Ver @.git/config@

h3. Eclipse

A través de Eclipse se han seguir los siguiente pasos:

* Perspectiva Git repository exploring: @Window -> Open perspective -> Others -> Git Repository Exploring@
* Añadir la **URI** (la URI es de prueba, se ha de sustituir por valores reales) del repositorio y se autocompletan los demás campos: 
** ssh://patxigortazar@192.168.33.10:29418/filetransfer
* Branch selection: dejar ambas seleccionadas
* Initial branch: seleccionar **development**

!images/eclipse-clone-repo.png!

h3. Cliente Git

Clonar el repositorio remoto a través de la consola:

pre. $ git clone ssh://patxigortazar@192.168.33.10:29418/filetransfer

**Git** hace @checkout del master@ por defecto (porque es donde se encuentra el _HEAD_ posicionado en el repositorio remoto). Se ha de cambiar a la rama **development** para empezar a desarrollar:

pre. $ cd filetransfer
$ git checkout development
Branch development set up to track remote branch development from origin.
Switched to a new branch 'development'

h2. Paso 3 - crear el proyecto

# Se ha de crear un proyecto Java:
** @org.filetransfer@
# Crear un fichero de versión en la raíz
** Version.txt <- 0.1
# Crear un fichero @SFTPTransfer@ en el paquete @org.filetransfer@.
# Añadir el proyecto al repositorio git del proyecto @org.filetransfer@.
## Eclipse:
### @Team > Share project > Git@
### @Repository: filetransfer@
### Añadir los ficheros para que Eclipse haga tracking de los mismos
### @Team > Add to index@
## Cliente Git:
*** @$ git status@
*** @$ git add <file>@
# **Commit!**

!images/commit-dealer.png!

h3. Commit 

Eclipse:

# Sobre el proyecto > Team > Commit
# El comentario es obligatorio
# Chequear
## Que el autor es el correcto
## Que están marcados los ficheros adecuados
## Que *no está marcada* la casilla _"Push the changes to upstream"_.

Cliente Git:

pre. git commit

h2. Paso 4 - desarrollo de la versión actual

Añadir algún método más a la clase @SFTPTransfer@ y ejecutar el comando @git status@:

pre. $ git status
# On branch develop
# Your branch is ahead of 'origin/develop' by 1 commit.
#
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#   modified:   SFTPTransfer.java
#
no changes added to commit (use "git add" and/or "git commit -a")

Hay ficheros no añadidos al staging area por lo que no se hará commit de ellos.

!images/eclipse-git-console-stage.png!

h3. git add

Añadir algún método más a la clase @SFTPTransfer@ y ejecutar el comando @git status@:

pre. git status

Hay ficheros no añadidos al staging area no se hará commit de ellos

pre. git add SFTPTransfer.java

Para añadirlos al staging area y que vayan en el próximo commit

pre. $ git status
# On branch develop
# Your branch is ahead of 'origin/develop' by 1 commit.
#
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#   modified:   SFTPTransfer.java
#

En Eclipse este proceso se hace automáticamente al hacer **commit**.
En consola se puede forzar con el parámetro **-a** al ejecutar:

pre. git commit -a

h2. Paso 5 - subir cambios al repositorio remoto (push)

En este momento el repositorio local se encuentra “a 2 commits” del repositorio 
remoto.

!images/repo-2-commits-ahead.png!

Subir lo que hay a la rama develop de origin (el repositorio remoto)

* Eclipse: @Sobre el proyecto > Team > Push to upstream@
* Cliente git consola: @git push origin@

h2. Paso 6 - estabilización de la versión 0.1

Se ha de seguir el proceso para unificar los desarrollos del proyecto en una 
rama estable y crear el respectivo tag.

h3. Rama de Versión

Crear un branch para la versión.

* Eclipse:
** Sobre el @proyecto > Team > Switch to > New branch@
*** From: refs/heads/development
*** Branch name: release-0.1
*** Asegurarse de que checkout new branch está activado
* Cliente git:
** @git checkout -b release-0.1 --track@
** @git push -u origin release-0.1@

El código del workspace señala ahora la versión **release-0.1**.
* Hacer algún cambio
* Commit  

h3. Actualizar desarrollo

* Cambiar en la rama development la **versión a 0.2**.
* Sobre el @proyecto > Team > Switch to > development@.
* Modificar el fichero @version.txt@.
* @Commit@
* @Push to upstream@

h3. Crear el Tag

Preparar la RC1 (_Release Candidate 1_).

* Sobre el @proyecto > Team > Switch to > release-0.1@
* Cambiar el nombre de la versión a **0.1.0-RC1**.
** @Commit@
** @Push to upstream@

Hacer el tag.

* Eclipse:
** @Team > Advanced > Tag > 0.1.0-RC1@
** @Team > Remote > Push... > Next > Add all tags spec@
* Cliente Git:
** @git tag -a 0.1.0-RC1 -m 'Release 0.1.0-RC1‘@
** @git push origin 0.1.0-RC1@

Ejecutar el ciclo de **Build/test/deploy...**

h2. Paso 7 - publicar la versión 0.1.0

Si el desarrollo, las pruebas y los despliegues son correctos en la rama **RCx**:

* Cambiar el nombre de la versión a **0.1.0**.
** Commit
** Push to upstream
Hacer el tag.
* Eclipse:
** @Team > Advanced > Tag > 0.1.0@
** @Team > Remote > Push... > Next > Add all tags spec@
** Marcar _"Save in origin"_ para añadirlo a la configuración del repositorio
* Cliente git:
** @git tag -a 0.1.0 -m 'Version 0.1.0‘@
** @git push origin 0.1.0@

Volver a ejecutar el ciclo de **Build/test/deploy...**