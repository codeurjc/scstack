package instalacionforja;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import es.sidelab.tools.commandline.ExecutionCommandException;

public class SSH {

	public static void main(String[] args) throws IOException, ExecutionCommandException {
		Instalacion.ejecutar("sh ficherosInstalacion/ssh_install.sh");
	}
	
	public void instalar() throws IOException, ExecutionCommandException {
		System.out.println("Al instalar openssh-server se pedirán los siguientes datos:");
		System.out.println("LDAP server Uniform Resource Identifier:");
		System.out.println("ldapi://localhost:389/");
		System.out.println("Distinguished name of the search base:");
		System.out.println("ou="+ Instalacion.config.getProperty("ouUsuarios") + "," + Instalacion.config.getProperty("baseDN"));
		System.out.println("versión: 3");
		System.out.println("Distinguished name of the search base:");
		System.out.println("Seleccionar Sí");
		System.out.println("Distinguished name of the search base:");
		System.out.println("Seleccionar No");
		System.out.println("LDAP account for root: ");
		System.out.println(Instalacion.config.getProperty("bindDN"));
		System.out.println("LDAP root password:");
		System.out.println(Instalacion.config.getProperty("passBindDN"));
		
		Instalacion.ejecutar("sh ficherosInstalacion/ssh_install.sh");
		
		crearFicheroSSHD(Instalacion.config.getProperty("ficheroConfigSSH"));
        crearFicheroPAM_SSHD("/etc/pam.d/sshd");
        crearFicheroLDAP_CONF("/etc/ldap.conf");
        crearFicheroNSS_SWITCH_CONF("/etc/nsswitch.conf");
        
        Instalacion.ejecutar("/etc/init.d/ssh restart");
        System.out.println("**************************************************\n");
	}

    private void crearFicheroNSS_SWITCH_CONF(String ruta) throws IOException {
        FileWriter file = null;
        file = new FileWriter(ruta);
        PrintWriter pw = new PrintWriter(file);
		
        pw.println("# /etc/nsswitch.conf");
        pw.println("#");
        pw.println("# Example configuration of GNU Name Service Switch functionality.");
        pw.println("# If you have the `glibc-doc-reference' and `info' packages installed, try:");
        pw.println("# `info libc \"Name Service Switch\"' for information about this file.");
        pw.println("");
        pw.println("passwd:         compat ldap");
        pw.println("group:          compat ldap");
        pw.println("shadow:         compat ldap");
        pw.println("");
        pw.println("hosts:          files mdns4_minimal [NOTFOUND=return] dns mdns4");
        pw.println("networks:       files");
        pw.println("");
        pw.println("protocols:      db files");
        pw.println("services:       db files");
        pw.println("ethers:         db files");
        pw.println("rpc:            db files");
        pw.println("");
        pw.println("netgroup:       nis");
        
        pw.close();
        file.close();

	}

	private void crearFicheroLDAP_CONF(String ruta) throws IOException {
        FileWriter file = null;
        file = new FileWriter(ruta);
        PrintWriter pw = new PrintWriter(file);
	
        pw.println("###DEBCONF###"); 
        pw.println("##"); 
        pw.println("## Configuration of this file will be managed by debconf as long as the"); 
        pw.println("## first line of the file says '###DEBCONF###'"); 
        pw.println("##"); 
        pw.println("## You should use dpkg-reconfigure to configure this file via debconf"); 
        pw.println("##"); 
        pw.println(""); 
        pw.println("#"); 
        pw.println("# @(#)$Id: ldap.conf,v 1.38 2006/05/15 08:13:31 lukeh Exp $"); 
        pw.println("#"); 
        pw.println("# This is the configuration file for the LDAP nameservice"); 
        pw.println("# switch library and the LDAP PAM module."); 
        pw.println("#"); 
        pw.println("# PADL Software"); 
        pw.println("# http://www.padl.com"); 
        pw.println("#"); 
        pw.println(""); 
        pw.println("# Your LDAP server. Must be resolvable without using LDAP."); 
        pw.println("# Multiple hosts may be specified, each separated by a "); 
        pw.println("# space. How long nss_ldap takes to failover depends on"); 
        pw.println("# whether your LDAP client library supports configurable"); 
        pw.println("# network or connect timeouts (see bind_timelimit)."); 
        pw.println("host 127.0.0.1"); 
        pw.println(""); 
        pw.println("# The distinguished name of the search base."); 
        pw.println("base " + Instalacion.config.getProperty("baseDN")); 
        pw.println(""); 
        pw.println("# Another way to specify your LDAP server is to provide an"); 
        pw.println("uri ldap://localhost:389/"); 
        pw.println("# Unix Domain Sockets to connect to a local LDAP Server."); 
        pw.println("#uri ldap://127.0.0.1/"); 
        pw.println("#uri ldaps://127.0.0.1/   "); 
        pw.println("#uri ldapi://%2fvar%2frun%2fldapi_sock/"); 
        pw.println("# Note: %2f encodes the '/' used as directory separator"); 
        pw.println(""); 
        pw.println("# The LDAP version to use (defaults to 3"); 
        pw.println("# if supported by client library)"); 
        pw.println("ldap_version 3"); 
        pw.println(""); 
        pw.println("# The distinguished name to bind to the server with."); 
        pw.println("# Optional: default is to bind anonymously."); 
        pw.println("binddn " + Instalacion.config.getProperty("bindDN")); 
        pw.println(""); 
        pw.println("# The credentials to bind with. "); 
        pw.println("# Optional: default is no credential."); 
        pw.println("bindpw " + Instalacion.config.getProperty("passBindDN")); 
        pw.println(""); 
        pw.println("# The distinguished name to bind to the server with"); 
        pw.println("# if the effective user ID is root. Password is"); 
        pw.println("# stored in /etc/ldap.secret (mode 600)"); 
        pw.println("rootbinddn cn=manager,dc=example,dc=net"); 
        pw.println(""); 
        pw.println("# The port."); 
        pw.println("# Optional: default is 389."); 
        pw.println("#port 389"); 
        pw.println(""); 
        pw.println("# The search scope."); 
        pw.println("#scope sub"); 
        pw.println("#scope one"); 
        pw.println("#scope base"); 
        pw.println(""); 
        pw.println("# Search timelimit"); 
        pw.println("#timelimit 30"); 
        pw.println(""); 
        pw.println("# Bind/connect timelimit"); 
        pw.println("#bind_timelimit 30"); 
        pw.println(""); 
        pw.println("# Reconnect policy: hard (default) will retry connecting to"); 
        pw.println("# the software with exponential backoff, soft will fail"); 
        pw.println("# immediately."); 
        pw.println("#bind_policy hard"); 
        pw.println(""); 
        pw.println("# Idle timelimit; client will close connections"); 
        pw.println("# (nss_ldap only) if the server has not been contacted"); 
        pw.println("# for the number of seconds specified below."); 
        pw.println("#idle_timelimit 3600"); 
        pw.println(""); 
        pw.println("# Filter to AND with uid=%s"); 
        pw.println("pam_filter objectclass=posixAccount"); 
        pw.println(""); 
        pw.println("# The user ID attribute (defaults to uid)"); 
        pw.println("pam_login_attribute uid"); 
        pw.println(""); 
        pw.println("# Search the root DSE for the password policy (works"); 
        pw.println("# with Netscape Directory Server)"); 
        pw.println("#pam_lookup_policy yes"); 
        pw.println(""); 
        pw.println("# Check the 'host' attribute for access control"); 
        pw.println("# Default is no; if set to yes, and user has no"); 
        pw.println("# value for the host attribute, and pam_ldap is"); 
        pw.println("# configured for account management (authorization)"); 
        pw.println("# then the user will not be allowed to login."); 
        pw.println("#pam_check_host_attr yes"); 
        pw.println(""); 
        pw.println("# Check the 'authorizedService' attribute for access"); 
        pw.println("# control"); 
        pw.println("# Default is no; if set to yes, and the user has no"); 
        pw.println("# value for the authorizedService attribute, and"); 
        pw.println("# pam_ldap is configured for account management"); 
        pw.println("# (authorization) then the user will not be allowed"); 
        pw.println("# to login."); 
        pw.println("#pam_check_service_attr yes"); 
        pw.println(""); 
        pw.println("# Group to enforce membership of"); 
        pw.println("#pam_groupdn cn=PAM,ou=Groups,dc=padl,dc=com"); 
        pw.println(""); 
        pw.println("# Group member attribute"); 
        pw.println("pam_member_attribute memberUid"); 
        pw.println(""); 
        pw.println("# Specify a minium or maximum UID number allowed"); 
        pw.println("#pam_min_uid 0"); 
        pw.println("#pam_max_uid 0"); 
        pw.println(""); 
        pw.println("# Template login attribute, default template user"); 
        pw.println("# (can be overriden by value of former attribute"); 
        pw.println("# in user's entry)"); 
        pw.println("#pam_login_attribute userPrincipalName"); 
        pw.println("#pam_template_login_attribute uid"); 
        pw.println("#pam_template_login nobody"); 
        pw.println(""); 
        pw.println("# HEADS UP: the pam_crypt, pam_nds_passwd,"); 
        pw.println("# and pam_ad_passwd options are no"); 
        pw.println("# longer supported."); 
        pw.println("#"); 
        pw.println("# Do not hash the password at all; presume"); 
        pw.println("# the directory server will do it, if"); 
        pw.println("# necessary. This is the default."); 
        pw.println("pam_password md5"); 
        pw.println(""); 
        pw.println("# Hash password locally; required for University of"); 
        pw.println("# Michigan LDAP server, and works with Netscape"); 
        pw.println("# Directory Server if you're using the UNIX-Crypt"); 
        pw.println("# hash mechanism and not using the NT Synchronization"); 
        pw.println("# service. "); 
        pw.println("#pam_password crypt"); 
        pw.println(""); 
        pw.println("# Remove old password first, then update in"); 
        pw.println("# cleartext. Necessary for use with Novell"); 
        pw.println("# Directory Services (NDS)"); 
        pw.println("#pam_password clear_remove_old"); 
        pw.println("#pam_password nds"); 
        pw.println(""); 
        pw.println("# RACF is an alias for the above. For use with"); 
        pw.println("# IBM RACF"); 
        pw.println("#pam_password racf"); 
        pw.println(""); 
        pw.println("# Update Active Directory password, by"); 
        pw.println("# creating Unicode password and updating"); 
        pw.println("# unicodePwd attribute."); 
        pw.println("#pam_password ad"); 
        pw.println(""); 
        pw.println("# Use the OpenLDAP password change"); 
        pw.println("# extended operation to update the password."); 
        pw.println("#pam_password exop"); 
        pw.println(""); 
        pw.println("# Redirect users to a URL or somesuch on password"); 
        pw.println("# changes."); 
        pw.println("#pam_password_prohibit_message Please visit http://internal to change your password."); 
        pw.println(""); 
        pw.println("# RFC2307bis naming contexts"); 
        pw.println("# Syntax:"); 
        pw.println("# nss_base_XXX		base?scope?filter"); 
        pw.println("# where scope is {base,one,sub}"); 
        pw.println("# and filter is a filter to be &'d with the"); 
        pw.println("# default filter."); 
        pw.println("# You can omit the suffix eg:"); 
        pw.println("# nss_base_passwd	ou=People,"); 
        pw.println("# to append the default base DN but this"); 
        pw.println("# may incur a small performance impact."); 
        pw.println("nss_base_passwd	ou=" + Instalacion.config.getProperty("ouUsuarios") + "," + Instalacion.config.getProperty("baseDN") + "?one"); 
        pw.println("nss_base_shadow	ou=" + Instalacion.config.getProperty("ouUsuarios") + "," + Instalacion.config.getProperty("baseDN") + "?one"); 
        pw.println("nss_base_group		ou=" + Instalacion.config.getProperty("ouProyectos") + "," + Instalacion.config.getProperty("baseDN") + "one"); 
        pw.println("#nss_base_hosts		ou=Hosts,dc=padl,dc=com?one"); 
        pw.println("#nss_base_services	ou=Services,dc=padl,dc=com?one"); 
        pw.println("#nss_base_networks	ou=Networks,dc=padl,dc=com?one"); 
        pw.println("#nss_base_protocols	ou=Protocols,dc=padl,dc=com?one"); 
        pw.println("#nss_base_rpc		ou=Rpc,dc=padl,dc=com?one"); 
        pw.println("#nss_base_ethers	ou=Ethers,dc=padl,dc=com?one"); 
        pw.println("#nss_base_netmasks	ou=Networks,dc=padl,dc=com?ne"); 
        pw.println("#nss_base_bootparams	ou=Ethers,dc=padl,dc=com?one"); 
        pw.println("#nss_base_aliases	ou=Aliases,dc=padl,dc=com?one"); 
        pw.println("#nss_base_netgroup	ou=Netgroup,dc=padl,dc=com?one"); 
        pw.println(""); 
        pw.println("# attribute/objectclass mapping"); 
        pw.println("# Syntax:"); 
        pw.println("#nss_map_attribute	rfc2307attribute	mapped_attribute"); 
        pw.println("#nss_map_objectclass	rfc2307objectclass	mapped_objectclass"); 
        pw.println(""); 
        pw.println("# configure --enable-nds is no longer supported."); 
        pw.println("# NDS mappings"); 
        pw.println("#nss_map_attribute uniqueMember member"); 
        pw.println(""); 
        pw.println("# Services for UNIX 3.5 mappings"); 
        pw.println("#nss_map_objectclass posixAccount User"); 
        pw.println("#nss_map_objectclass shadowAccount User"); 
        pw.println("#nss_map_attribute uid msSFU30Name"); 
        pw.println("#nss_map_attribute uniqueMember msSFU30PosixMember"); 
        pw.println("#nss_map_attribute userPassword msSFU30Password"); 
        pw.println("#nss_map_attribute homeDirectory msSFU30HomeDirectory"); 
        pw.println("#nss_map_attribute homeDirectory msSFUHomeDirectory"); 
        pw.println("#nss_map_objectclass posixGroup Group"); 
        pw.println("#pam_login_attribute msSFU30Name"); 
        pw.println("#pam_filter objectclass=User"); 
        pw.println("#pam_password ad"); 
        pw.println(""); 
        pw.println("# configure --enable-mssfu-schema is no longer supported."); 
        pw.println("# Services for UNIX 2.0 mappings"); 
        pw.println("#nss_map_objectclass posixAccount User"); 
        pw.println("#nss_map_objectclass shadowAccount user"); 
        pw.println("#nss_map_attribute uid msSFUName"); 
        pw.println("#nss_map_attribute uniqueMember posixMember"); 
        pw.println("#nss_map_attribute userPassword msSFUPassword"); 
        pw.println("#nss_map_attribute homeDirectory msSFUHomeDirectory"); 
        pw.println("#nss_map_attribute shadowLastChange pwdLastSet"); 
        pw.println("#nss_map_objectclass posixGroup Group"); 
        pw.println("#nss_map_attribute cn msSFUName"); 
        pw.println("#pam_login_attribute msSFUName"); 
        pw.println("#pam_filter objectclass=User"); 
        pw.println("#pam_password ad"); 
        pw.println(""); 
        pw.println("# RFC 2307 (AD) mappings"); 
        pw.println("#nss_map_objectclass posixAccount user"); 
        pw.println("#nss_map_objectclass shadowAccount user"); 
        pw.println("#nss_map_attribute uid sAMAccountName"); 
        pw.println("#nss_map_attribute homeDirectory unixHomeDirectory"); 
        pw.println("#nss_map_attribute shadowLastChange pwdLastSet"); 
        pw.println("#nss_map_objectclass posixGroup group"); 
        pw.println("#nss_map_attribute uniqueMember member"); 
        pw.println("#pam_login_attribute sAMAccountName"); 
        pw.println("#pam_filter objectclass=User"); 
        pw.println("#pam_password ad"); 
        pw.println(""); 
        pw.println("# configure --enable-authpassword is no longer supported"); 
        pw.println("# AuthPassword mappings"); 
        pw.println("#nss_map_attribute userPassword authPassword"); 
        pw.println(""); 
        pw.println("# AIX SecureWay mappings"); 
        pw.println("#nss_map_objectclass posixAccount aixAccount"); 
        pw.println("#nss_base_passwd ou=aixaccount,?one"); 
        pw.println("#nss_map_attribute uid userName"); 
        pw.println("#nss_map_attribute gidNumber gid"); 
        pw.println("#nss_map_attribute uidNumber uid"); 
        pw.println("#nss_map_attribute userPassword passwordChar"); 
        pw.println("#nss_map_objectclass posixGroup aixAccessGroup"); 
        pw.println("#nss_base_group ou=aixgroup,?one"); 
        pw.println("#nss_map_attribute cn groupName"); 
        pw.println("#nss_map_attribute uniqueMember member"); 
        pw.println("#pam_login_attribute userName"); 
        pw.println("#pam_filter objectclass=aixAccount"); 
        pw.println("#pam_password clear"); 
        pw.println(""); 
        pw.println("# Netscape SDK LDAPS"); 
        pw.println("#ssl on"); 
        pw.println(""); 
        pw.println("# Netscape SDK SSL options"); 
        pw.println("#sslpath /etc/ssl/certs"); 
        pw.println(""); 
        pw.println("# OpenLDAP SSL mechanism"); 
        pw.println("# start_tls mechanism uses the normal LDAP port, LDAPS typically 636"); 
        pw.println("#ssl start_tls"); 
        pw.println("#ssl on"); 
        pw.println(""); 
        pw.println("# OpenLDAP SSL options"); 
        pw.println("# Require and verify server certificate (yes/no)"); 
        pw.println("# Default is to use libldap's default behavior, which can be configured in"); 
        pw.println("# /etc/openldap/ldap.conf using the TLS_REQCERT setting.  The default for"); 
        pw.println("# OpenLDAP 2.0 and earlier is \"no\", for 2.1 and later is \"yes\"."); 
        pw.println("#tls_checkpeer yes"); 
        pw.println(""); 
        pw.println("# CA certificates for server certificate verification"); 
        pw.println("# At least one of these are required if tls_checkpeer is \"yes\""); 
        pw.println("#tls_cacertfile /etc/ssl/ca.cert"); 
        pw.println("#tls_cacertdir /etc/ssl/certs"); 
        pw.println(""); 
        pw.println("# Seed the PRNG if /dev/urandom is not provided"); 
        pw.println("#tls_randfile /var/run/egd-pool"); 
        pw.println(""); 
        pw.println("# SSL cipher suite"); 
        pw.println("# See man ciphers for syntax"); 
        pw.println("#tls_ciphers TLSv1"); 
        pw.println(""); 
        pw.println("# Client certificate and key"); 
        pw.println("# Use these, if your server requires client authentication."); 
        pw.println("#tls_cert"); 
        pw.println("#tls_key"); 
        pw.println(""); 
        pw.println("# Disable SASL security layers. This is needed for AD."); 
        pw.println("#sasl_secprops maxssf=0"); 
        pw.println(""); 
        pw.println("# Override the default Kerberos ticket cache location."); 
        pw.println("#krb5_ccname FILE:/etc/.ldapcache"); 
        pw.println(""); 
        pw.println("# SASL mechanism for PAM authentication - use is experimental"); 
        pw.println("# at present and does not support password policy control"); 
        pw.println("#pam_sasl_mech DIGEST-MD5"); 
        
        pw.close();
        file.close();

	}

	private void crearFicheroSSHD(String ruta) throws IOException {
        FileWriter file = null;
        file = new FileWriter(ruta);
        PrintWriter pw = new PrintWriter(file);

        
        pw.println("# Package generated configuration file");
        pw.println("# See the sshd_config(5) manpage for details");
        pw.println("");
        pw.println("# What ports, IPs and protocols we listen for");
        pw.println("Port 22");
        pw.println("# Use these options to restrict which interfaces/protocols sshd will bind to");
        pw.println("#ListenAddress ::");
        pw.println("#ListenAddress 0.0.0.0");
        pw.println("Protocol 2");
        pw.println("# HostKeys for protocol version 2");
        pw.println("HostKey /etc/ssh/ssh_host_rsa_key");
        pw.println("HostKey /etc/ssh/ssh_host_dsa_key");
        pw.println("#Privilege Separation is turned on for security");
        pw.println("UsePrivilegeSeparation yes");
        pw.println("");
        pw.println("# Lifetime and size of ephemeral version 1 server key");
        pw.println("KeyRegenerationInterval 3600");
        pw.println("ServerKeyBits 768");
        pw.println("");
        pw.println("# Logging");
        pw.println("SyslogFacility AUTH");
        pw.println("LogLevel INFO");
        pw.println("");
        pw.println("# Authentication:");
        pw.println("LoginGraceTime 120");
        pw.println("PermitRootLogin yes");
        pw.println("StrictModes yes");
        pw.println("");
        pw.println("RSAAuthentication yes");
        pw.println("PubkeyAuthentication yes");
        pw.println("#AuthorizedKeysFile	%h/.ssh/authorized_keys");
        pw.println("");
        pw.println("# Don't read the user's ~/.rhosts and ~/.shosts files");
        pw.println("IgnoreRhosts yes");
        pw.println("# For this to work you will also need host keys in /etc/ssh_known_hosts");
        pw.println("RhostsRSAAuthentication no");
        pw.println("# similar for protocol version 2");
        pw.println("HostbasedAuthentication no");
        pw.println("# Uncomment if you don't trust ~/.ssh/known_hosts for RhostsRSAAuthentication");
        pw.println("#IgnoreUserKnownHosts yes");
        pw.println("");
        pw.println("# To enable empty passwords, change to yes (NOT RECOMMENDED)");
        pw.println("PermitEmptyPasswords no");
        pw.println("");
        pw.println("# Change to yes to enable challenge-response passwords (beware issues with");
        pw.println("# some PAM modules and threads)");
        pw.println("ChallengeResponseAuthentication no");
        pw.println("");
        pw.println("# Change to no to disable tunnelled clear text passwords");
        pw.println("#PasswordAuthentication yes");
        pw.println("");
        pw.println("# Kerberos options");
        pw.println("#KerberosAuthentication no");
        pw.println("#KerberosGetAFSToken no");
        pw.println("#KerberosOrLocalPasswd yes");
        pw.println("#KerberosTicketCleanup yes");
        pw.println("");
        pw.println("# GSSAPI options");
        pw.println("#GSSAPIAuthentication no");
        pw.println("#GSSAPICleanupCredentials yes");
        pw.println("");
        pw.println("X11Forwarding yes");
        pw.println("X11DisplayOffset 10");
        pw.println("PrintMotd no");
        pw.println("PrintLastLog yes");
        pw.println("TCPKeepAlive yes");
        pw.println("#UseLogin no");
        pw.println("");
        pw.println("#MaxStartups 10:30:60");
        pw.println("#Banner /etc/issue.net");
        pw.println("");
        pw.println("# Allow client to pass locale environment variables");
        pw.println("AcceptEnv LANG LC_*");
        pw.println("");
        pw.println("Subsystem sftp internal-sftp -u 0002");
        pw.println("");
        pw.println("# Set this to 'yes' to enable PAM authentication, account processing,");
        pw.println("# and session processing. If this is enabled, PAM authentication will");
        pw.println("# be allowed through the ChallengeResponseAuthentication and");
        pw.println("# PasswordAuthentication.  Depending on your PAM configuration,");
        pw.println("# PAM authentication via ChallengeResponseAuthentication may bypass");
        pw.println("# the setting of \"PermitRootLogin without-password\".");
        pw.println("# If you just want the PAM account and session checks to run without");
        pw.println("# PAM authentication, then enable this but set PasswordAuthentication");
        pw.println("# and ChallengeResponseAuthentication to 'no'.");
        pw.println("UsePAM yes");

        pw.println(""); 
        pw.println(Instalacion.config.getProperty("marcadorJaulaSSH"));

        pw.close();
        file.close();
    }

    private void crearFicheroPAM_SSHD(String ruta) throws IOException {
        FileWriter file = null;
        file = new FileWriter(ruta);
        PrintWriter pw = new PrintWriter(file);

        pw.println("# PAM configuration for the Secure Shell service");
        pw.println("");
        pw.println("# Read environment variables from /etc/environment and");
        pw.println("# /etc/security/pam_env.conf.");
        pw.println("auth       required     pam_env.so # [1]");
        pw.println("# In Debian 4.0 (etch), locale-related environment variables were moved to");
        pw.println("# /etc/default/locale, so read that as well.");
        pw.println("auth       required     pam_env.so envfile=/etc/default/locale");
        pw.println("");
        pw.println("# Standard Un*x authentication.");
        pw.println("@include common-auth");
        pw.println("");
        pw.println("# Disallow non-root logins when /etc/nologin exists.");
        pw.println("account    required     pam_nologin.so");
        pw.println("");
        pw.println("# Uncomment and edit /etc/security/access.conf if you need to set complex");
        pw.println("# access limits that are hard to express in sshd_config.");
        pw.println("# account  required     pam_access.so");
        pw.println("");
        pw.println("# Standard Un*x authorization.");
        pw.println("@include common-account");
        pw.println("");
        pw.println("# Standard Un*x session setup and teardown.");
        pw.println("@include common-session");
        pw.println("");
        pw.println("# Print the message of the day upon successful login.");
        pw.println("session    optional     pam_motd.so # [1]");
        pw.println("");
        pw.println("# Print the status of the user's mailbox upon successful login.");
        pw.println("session    optional     pam_mail.so standard noenv # [1]");
        pw.println("");
        pw.println("# Set up user limits from /etc/security/limits.conf.");
        pw.println("session    required     pam_limits.so");
        pw.println("");
        pw.println("# Set up SELinux capabilities (need modified pam)");
        pw.println("# session  required     pam_selinux.so multiple");
        pw.println("");
        pw.println("# Standard Un*x password updating.");
        pw.println("@include common-password");
        pw.println("");
        pw.println("session optional pam_umask.so umask=0002");

        pw.close();
        file.close();
    }

}
